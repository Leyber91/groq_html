(function () {
    const REGEX = {
        LINE: /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/,
        QUOTES: /(^["']|["']$)/g,
        INTERPOLATION: /\$\{([\w.-]+)\}/g
    };

    /**
     * Parses the content of a .env file and returns an object with key-value pairs.
     * 
     * This function:
     * 1. Splits the content into lines
     * 2. Matches each line against the LINE regex
     * 3. Extracts key-value pairs, removing quotes if present
     * 4. Returns an object with the parsed environment variables
     * 
     * @param {string} content - The content of the .env file
     * @returns {Object} An object containing the parsed environment variables
     * 
     * Usage example:
     * const envContent = "API_KEY=123456\nDEBUG=true";
     * const parsedEnv = parseEnv(envContent);
     * console.log(parsedEnv); // { API_KEY: "123456", DEBUG: "true" }
     * 
     * Other files that use this function:
     * - This function is used internally by the dotenv.config method
     * - It's also exposed as dotenv.parse for external use
     * 
     * Role in overall program logic:
     * This function is crucial for parsing .env files and converting them into
     * a usable format for the application. It's the first step in loading
     * environment variables from a configuration file.
     */
    function parseEnv(content) {
        return content.split("\n").reduce((env, line) => {
            const match = line.match(REGEX.LINE);
            if (match) {
                const [, key, value] = match;
                env[key] = value ? value.replace(REGEX.QUOTES, "").trim() : "";
            }
            return env;
        }, {});
    }

    /**
     * Interpolates environment variables within the values of the parsed env object.
     * 
     * This function:
     * 1. Iterates through each value in the env object
     * 2. Replaces ${VAR} patterns with their corresponding values from the env object
     * 3. Returns a new object with interpolated values
     * 
     * @param {Object} env - The object containing parsed environment variables
     * @returns {Object} A new object with interpolated environment variables
     * 
     * Usage example:
     * const env = { BASE_URL: "http://example.com", API_URL: "${BASE_URL}/api" };
     * const interpolatedEnv = interpolateEnvVars(env);
     * console.log(interpolatedEnv.API_URL); // "http://example.com/api"
     * 
     * Other files that use this function:
     * - This function is used internally by the dotenv.config method
     * 
     * Role in overall program logic:
     * This function enables the use of variable references within .env files,
     * allowing for more dynamic and flexible configuration. It ensures that
     * all variables are fully resolved before being applied to the environment.
     */
    function interpolateEnvVars(env) {
        const interpolate = (value) => {
            let interpolated = value;
            let match;
            while ((match = REGEX.INTERPOLATION.exec(interpolated)) !== null) {
                const [fullMatch, key] = match;
                const replacement = env[key] || '';
                interpolated = interpolated.replace(fullMatch, replacement);
            }
            return interpolated;
        };

        return Object.fromEntries(
            Object.entries(env).map(([key, value]) => [key, interpolate(value)])
        );
    }

    window.dotenv = {
        /**
         * Loads and processes environment variables from a configuration element.
         * 
         * This function:
         * 1. Finds the configuration element in the DOM
         * 2. Parses its content using parseEnv
         * 3. Interpolates variable references using interpolateEnvVars
         * 4. Applies the processed variables to process.env
         * 5. Optionally logs debug information
         * 
         * @param {Object} options - Configuration options
         * @param {string} [options.configId="dotenv-config"] - ID of the configuration element
         * @param {boolean} [options.overwrite=false] - Whether to overwrite existing env variables
         * @param {boolean} [options.debug=false] - Whether to log debug information
         * @returns {Object} The processed environment variables
         * 
         * Usage example:
         * <script id="dotenv-config" type="application/json">
         *   API_KEY=123456
         *   DEBUG=true
         * </script>
         * <script>
         *   const env = dotenv.config({ debug: true });
         *   console.log(process.env.API_KEY); // "123456"
         * </script>
         * 
         * Other files that use this function:
         * - This function is typically called in the main entry point of the application
         * 
         * Role in overall program logic:
         * This is the main entry point for the dotenv library in browser environments.
         * It orchestrates the loading, parsing, and application of environment variables,
         * making them available throughout the application via process.env.
         */
        config: function (options = {}) {
            const configElement = document.getElementById(options.configId || "dotenv-config");
            if (!configElement) {
                console.error("dotenv: Configuration element not found");
                return;
            }

            const env = parseEnv(configElement.textContent);
            const interpolatedEnv = interpolateEnvVars(env);

            Object.entries(interpolatedEnv).forEach(([key, value]) => {
                if (!(key in process.env) || options.overwrite) {
                    Object.defineProperty(process.env, key, {
                        value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                }
            });

            if (options.debug) {
                console.log("dotenv: Loaded environment variables", interpolatedEnv);
            }

            return interpolatedEnv;
        },
        parse: parseEnv
    };

    if (typeof module !== 'undefined' && module.exports) {
        module.exports = window.dotenv;
    }

    console.log("dotenv.min.js loaded with advanced features and optimizations");
})();