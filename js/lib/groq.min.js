(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        root.Groq = factory();
    }
}(typeof self !== 'undefined' ? self : this, function () {

    const API_BASE_URL = 'https://api.groq.com/openai/v1';
    const DEFAULT_MODEL = 'llama3-groq-70b-8192-tool-use-preview';
    const DEFAULT_MAX_TOKENS = 8192;
    const DEFAULT_TEMPERATURE = 0.7;

    /**
     * Handles the response from the Groq API.
     * 
     * This function:
     * 1. Checks if the response is ok (status in the range 200-299)
     * 2. If not ok, throws an error with the status
     * 3. If ok, parses and returns the JSON response
     * 
     * @param {Response} response - The fetch Response object
     * @returns {Promise<Object>} The parsed JSON response
     * @throws {Error} If the response is not ok
     * 
     * Usage example:
     * const response = await fetch(url, options);
     * const data = await handleResponse(response);
     * 
     * Other files that use this function:
     * - This function is used internally by the Groq class methods
     * 
     * Role in overall program logic:
     * This function centralizes error handling and response parsing for all API calls,
     * ensuring consistent behavior across different Groq API endpoints.
     */
    const handleResponse = async (response) => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return await response.json();
    };

    class Groq {
        /**
         * Creates a new Groq instance.
         * 
         * This constructor:
         * 1. Validates that an API key is provided
         * 2. Sets up the API key for use in requests
         * 3. Initializes the chat and models properties with their respective methods
         * 
         * @param {string} apiKey - The API key for authenticating with Groq
         * @throws {Error} If no API key is provided
         * 
         * Usage example:
         * const groq = new Groq('your-api-key-here');
         * 
         * Other files that use this constructor:
         * - Any file that needs to interact with the Groq API
         * 
         * Role in overall program logic:
         * This constructor initializes the Groq client, which is the main entry point
         * for interacting with the Groq API. It sets up the necessary authentication
         * and provides methods for making API calls.
         */
        constructor(apiKey) {
            if (!apiKey) {
                throw new Error('API key is required');
            }
            this.apiKey = apiKey;
            this.chat = {
                completions: {
                    create: this.createChatCompletion.bind(this)
                }
            };
            this.models = {
                list: this.listModels.bind(this)
            };
        }

        /**
         * Creates a chat completion using the Groq API.
         * 
         * This method:
         * 1. Prepares the request options with default values and user input
         * 2. Sends a POST request to the Groq API's chat completions endpoint
         * 3. Handles the response using the handleResponse function
         * 
         * @param {Object} options - The options for creating a chat completion
         * @param {string} [options.model=DEFAULT_MODEL] - The model to use for completion
         * @param {Array} options.messages - The messages to use for completion
         * @param {number} [options.max_tokens=DEFAULT_MAX_TOKENS] - The maximum number of tokens to generate
         * @param {number} [options.temperature=DEFAULT_TEMPERATURE] - The sampling temperature to use
         * @returns {Promise<Object>} The chat completion response from the API
         * @throws {Error} If there's an error during the API call
         * 
         * Usage example:
         * const completion = await groq.chat.completions.create({
         *   messages: [{ role: 'user', content: 'Hello, how are you?' }]
         * });
         * 
         * Other files that use this method:
         * - Any file that needs to generate chat completions using Groq
         * 
         * Role in overall program logic:
         * This method is crucial for interacting with Groq's language model.
         * It allows the application to send prompts and receive AI-generated responses,
         * which can be used for various natural language processing tasks.
         */
        async createChatCompletion(options) {
            const { model = DEFAULT_MODEL, messages, max_tokens = DEFAULT_MAX_TOKENS, temperature = DEFAULT_TEMPERATURE } = options;
            
            try {
                const response = await fetch(`${API_BASE_URL}/chat/completions`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.apiKey}`
                    },
                    body: JSON.stringify({ model, messages, max_tokens, temperature })
                });
                return await handleResponse(response);
            } catch (error) {
                console.error('Error in createChatCompletion:', error);
                throw error;
            }
        }

        /**
         * Retrieves a list of available models from the Groq API.
         * 
         * This method:
         * 1. Sends a GET request to the Groq API's models endpoint
         * 2. Handles the response using the handleResponse function
         * 
         * @returns {Promise<Object>} The list of available models
         * @throws {Error} If there's an error during the API call
         * 
         * Usage example:
         * const models = await groq.models.list();
         * console.log(models);
         * 
         * Other files that use this method:
         * - Any file that needs to retrieve or display available Groq models
         * 
         * Role in overall program logic:
         * This method allows the application to dynamically fetch the list of
         * available models from Groq. This can be useful for providing model
         * options to users or for checking model availability before making
         * chat completion requests.
         */
        async listModels() {
            try {
                const response = await fetch(`${API_BASE_URL}/models`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${this.apiKey}`
                    }
                });
                return await handleResponse(response);
            } catch (error) {
                console.error('Error in listModels:', error);
                throw error;
            }
        }
    }

    console.log('Groq library loaded successfully');

    return { Groq };
}));