(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.Groq = factory();
    }
}(typeof self !== 'undefined' ? self : this, function () {

    // Constants
    const API_BASE_URL = 'https://api.groq.com/openai/v1';
    const DEFAULT_MODEL = 'llama3-groq-70b-8192-tool-use-preview';
    const DEFAULT_MAX_TOKENS = 8192;
    const DEFAULT_TEMPERATURE = 0.7;

    // Utility functions
    function handleResponse(response) {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    }

    function handleError(error) {
        console.error('Error:', error);
        throw error;
    }

    // Main Groq class
    class Groq {
        constructor(apiKey) {
            if (!apiKey) {
                throw new Error('API key is required');
            }
            this.apiKey = apiKey;
            this.chat = {
                completions: {
                    create: this.createChatCompletion.bind(this)
                }
            };
            this.models = {
                list: this.listModels.bind(this)
            };
        }

        async createChatCompletion(options) {
            const endpoint = `${API_BASE_URL}/chat/completions`;
            const body = {
                model: options.model || DEFAULT_MODEL,
                messages: options.messages,
                max_tokens: options.max_tokens || DEFAULT_MAX_TOKENS,
                temperature: options.temperature || DEFAULT_TEMPERATURE
            };

            return fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`
                },
                body: JSON.stringify(body)
            })
            .then(handleResponse)
            .catch(handleError);
        }

        async listModels() {
            const endpoint = `${API_BASE_URL}/models`;
            return fetch(endpoint, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`
                }
            })
            .then(handleResponse)
            .catch(handleError);
        }
    }

    console.log('Groq library loaded successfully');

    return { Groq: Groq };
}));